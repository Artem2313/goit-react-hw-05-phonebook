{"version":3,"sources":["transitions/slide.module.css","transitions/pop.module.css","components/CheckContact/CheckContact.module.css","tools/uuid/Uuid.js","components/CreateContact/CreateContact.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","tools/FilterContactsByQuery/FilterContactsByQuery.js","components/CheckContact/CheckContact.jsx","components/App.jsx","index.js"],"names":["module","exports","uuidv4","require","CreateContact","state","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","contact","id","onAddContact","props","resetForm","this","onSubmit","htmlFor","onChange","type","required","Component","Filter","filter","Contactlist","onDelete","filtedContacts","TransitionGroup","component","map","CSSTransition","in","classNames","slide","timeout","unmountOnExit","className","key","onClick","filterContactsByQuery","contacts","toLowerCase","includes","CheckContact","messageText","styles","div","App","message","addContact","newContact","find","setTimeout","handleDelete","contactsFromLocalStorage","localStorage","getItem","JSON","parse","prevProps","prevState","setItem","stringify","appear","length","pop","ContactList","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.acab79ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__1oWct\",\"enterActive\":\"slide_enterActive__2TeSF\",\"exit\":\"slide_exit__18oF-\",\"exitActive\":\"slide_exitActive__28vem\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__1fbRi\",\"enterActive\":\"pop_enterActive__3b5NM\",\"exit\":\"pop_exit__24TTt\",\"exitActive\":\"pop_exitActive__1Fyd5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"div\":\"CheckContact_div__3x8en\"};","const uuidv4 = require('uuid/v4');\n\nexport default uuidv4;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport uuidv4 from '../../tools/uuid/Uuid';\n\nexport default class CreateContact extends Component {\n  static propTypes = {\n    onAddContact: PropTypes.func.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const contact = {\n      id: uuidv4(),\n      name: this.state.name,\n      number: this.state.number,\n    };\n    const { onAddContact } = this.props;\n\n    onAddContact(contact);\n\n    this.resetForm();\n  };\n\n  resetForm = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label htmlFor=\"name\">\n          <h3>Name</h3>\n          <input\n            name=\"name\"\n            value={name}\n            onChange={this.handleChange}\n            type=\"text\"\n            required\n          />\n        </label>\n\n        <label htmlFor=\"number\">\n          <h3>Phone</h3>\n          <input\n            name=\"number\"\n            value={number}\n            onChange={this.handleChange}\n            type=\"number\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ filter, onChange }) => (\n  <div>\n    <label htmlFor=\"filter\">\n      <h2>Find contacts by name</h2>\n      <input name=\"filter\" value={filter} onChange={onChange} type=\"text\" />\n    </label>\n  </div>\n);\n\nFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport slide from '../../transitions/slide.module.css';\n\nconst Contactlist = ({ onDelete, filtedContacts }) =>\n  filtedContacts && (\n    <TransitionGroup component=\"ul\">\n      {filtedContacts.map(({ id, name, number }) => (\n        <CSSTransition\n          in\n          classNames={slide}\n          timeout={250}\n          unmountOnExit\n          className={name}\n          key={id}\n        >\n          <li key={id}>\n            {name}: {number}\n            <button type=\"button\" onClick={() => onDelete(id)}>\n              Delete\n            </button>\n          </li>\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n\nContactlist.propTypes = {\n  onDelete: PropTypes.func.isRequired,\n  filtedContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ).isRequired,\n};\n\nexport default Contactlist;\n","const filterContactsByQuery = (contacts, filter) => {\n  return contacts.filter(\n    contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n      contact.number.includes(filter),\n  );\n};\n\nexport default filterContactsByQuery;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './CheckContact.module.css';\n\nconst CheckContact = ({ messageText }) => (\n  <div className={styles.div}>{messageText}</div>\n);\n\nCheckContact.propTypes = {\n  messageText: PropTypes.string.isRequired,\n};\n\nexport default CheckContact;\n","import React, { Component } from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport CreateContact from './CreateContact/CreateContact';\nimport Filter from './Filter/Filter';\nimport ContactList from './ContactList/ContactList';\nimport filterContactsByQuery from '../tools/FilterContactsByQuery/FilterContactsByQuery';\nimport '../transitions/title.css';\nimport pop from '../transitions/pop.module.css';\nimport slide from '../transitions/slide.module.css';\nimport CheckContact from './CheckContact/CheckContact';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n    message: false,\n    messageText: '',\n  };\n\n  componentDidMount() {\n    const contactsFromLocalStorage = localStorage.getItem('contacts');\n    if (contactsFromLocalStorage) {\n      this.setState({ contacts: JSON.parse(contactsFromLocalStorage) });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { contacts } = this.state;\n    if (prevState.contacts !== contacts) {\n      localStorage.setItem('contacts', JSON.stringify(contacts));\n    }\n  }\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  addContact = newContact => {\n    const { contacts } = this.state;\n    const ContactExists = contacts.find(\n      contact => contact.name === newContact.name,\n    );\n    if (ContactExists) {\n      this.setState({\n        message: true,\n        messageText: `Contact ${newContact.name} is already exists in your phonebook!`,\n      });\n      setTimeout(() => {\n        this.setState({\n          message: false,\n        });\n      }, 2000);\n    } else {\n      this.setState(state => ({\n        contacts: [...state.contacts, newContact],\n      }));\n    }\n  };\n\n  handleDelete = id => {\n    this.setState(state => ({\n      contacts: state.contacts.filter(contact => contact.id !== id),\n    }));\n  };\n\n  render() {\n    const { contacts, filter, message, messageText } = this.state;\n    const onDelete = this.handleDelete;\n\n    const filtedContacts = filterContactsByQuery(contacts, filter);\n\n    return (\n      <div>\n        <TransitionGroup>\n          <CSSTransition in timeout={500} appear classNames=\"title\">\n            <h1 className=\"title\">Phonebook</h1>\n          </CSSTransition>\n          <CreateContact onAddContact={this.addContact} />\n          <h2>Contacts</h2>\n          {contacts.length > 1 && (\n            <CSSTransition timeout={500} classNames={pop}>\n              <Filter value={filter} onChange={this.handleChange} />\n            </CSSTransition>\n          )}\n          <ContactList onDelete={onDelete} filtedContacts={filtedContacts} />\n          {message && (\n            <CSSTransition in timeout={250} classNames={slide}>\n              <CheckContact messageText={messageText} />\n            </CSSTransition>\n          )}\n        </TransitionGroup>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './main.css';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}